use glam::{vec2, vec3};
use macroquad::models::Vertex;
use macroquad::prelude::*;

// https://docs.rs/macroquad/0.3.0-alpha.15/macroquad/index.html
// https://github.com/not-fl3/macroquad/tree/master/examples
// https://github.com/not-fl3/nanoserde
fn window_conf() -> Conf {
    Conf {
        window_title: "testdrive".to_owned(),
        fullscreen: true,
        ..Default::default()
    }
}

const L: f32 = 100.0;
const SPD: f32 = 30.0;

type FPair = (f32, f32);

fn screen_to_world(scr: FPair) -> FPair {
    let ll = L + 12.0;
    let w = screen_width();
    let h = screen_height();
    let ar = w / h;
    ((scr.0 / w - 0.5) * ll * ar, -(scr.1 / h - 0.5) * ll)
}

#[macroquad::main(window_conf())]
async fn main() {
    let font = load_ttf_font("./vt323.ttf").await;

    let texture: Texture2D = load_texture("crab.png").await;

    let mut pos = (0.0f32, 0.0f32);

    let mesh = Mesh {
        vertices: vec![
            Vertex {
                position: vec3(-30.0, 20.0, 0.0),
                uv: vec2(0.0, 0.0),
                color: Color::new(1.0, 0.0, 0.0, 1.0),
            },
            Vertex {
                position: vec3(30.0, 20.0, 0.0),
                uv: vec2(1.0, 0.0),
                color: Color::new(0.0, 1.0, 0.0, 1.0),
            },
            Vertex {
                position: vec3(0.0, -20.0, 0.0),
                uv: vec2(0.5, 1.0),
                color: Color::new(0.0, 0.0, 1.0, 1.0),
            },
        ],
        indices: vec![0, 1, 2],
        texture: Some(texture),
    };

    loop {
        let dt = get_frame_time();
        let t = get_time();
        let ar = screen_width() / screen_height();

        set_camera(Camera2D {
            zoom: vec2(1. / L, ar / L),
            ..Default::default()
        });

        if is_key_down(KeyCode::Left) {
            pos.0 -= SPD * dt as f32;
        }
        if is_key_down(KeyCode::Right) {
            pos.0 += SPD * dt as f32;
        }
        if is_key_down(KeyCode::Up) {
            pos.1 += SPD * dt as f32;
        }
        if is_key_down(KeyCode::Down) {
            pos.1 -= SPD * dt as f32;
        }
        if is_key_down(KeyCode::Escape) {
            return;
        }

        if is_mouse_button_down(MouseButton::Left) {
            let scr = mouse_position();
            let wrl = screen_to_world(scr);
            pos.0 = wrl.0;
            pos.1 = wrl.1;
            //println!("{:.1}, {:.1}", wrl.0, wrl.1);
        }

        clear_background(BLACK);

        draw_rectangle(-0.5 * L, -0.5 * L, 1.0 * L, 1.0 * L, YELLOW);
        draw_rectangle(-40.0, -40.0, 80.0, 80.0, RED);

        draw_circle(pos.0, pos.1, 10.0, BLUE);

        draw_circle(-56.0 * ar, -56.0, 2.0, MAGENTA);
        draw_circle(56.0 * ar, -56.0, 2.0, MAGENTA);
        draw_circle(-56.0 * ar, 56.0, 2.0, MAGENTA);
        draw_circle(56.0 * ar, 56.0, 2.0, MAGENTA);

        draw_mesh(&mesh);

        /*set_camera(Camera {

        })*/

        set_default_camera();

        /*draw_texture(
            texture,
            screen_width() / 2. - texture.width() / 2.,
            screen_height() / 2. - texture.height() / 2.,
            WHITE,
        );*/

        draw_texture_ex(
            texture,
            screen_width() / 2. - texture.width() / 2.,
            screen_height() / 2. - texture.height() / 2.,
            WHITE,
            DrawTextureParams {
                pivot: Some(Vec2::new(screen_width() / 2.0, screen_height() / 2.0)),
                rotation: t as f32,
                flip_x: false,
                flip_y: false,
                source: None,
                dest_size: None,
            },
        );

        draw_text_ex(
            &format!("fps:{}, t:{:.2}", get_fps(), t)[..],
            20.0,
            20.0,
            TextParams {
                font: font,
                color: GREEN,
                font_scale: 1.0,
                font_size: 32,
            },
        );

        next_frame().await
    }
}
